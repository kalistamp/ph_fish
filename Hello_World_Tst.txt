
https://aws.amazon.com/

            [ Drop down in order of steps completed...]
            
           

* Obtained a Domain from Freenom (http://raymondspizzeria.cf/) 
    #Chose to grab a domain from Freenom instead of AWS Route 53 even tho i will be using most AWS for this first tester campaign 

* Created AWS Account for cloud - rroadrunner

* Favorite an AWS EC2 Instance (This is pretty much just a dedicated aws server)
    #Ec2 is the erver out victims will be connecting too

* Favorite an AWS S3 Bucket to receive emails back to our Domain we get earlier from Freenom 
    #If the victim responds back to our phishing email, you will be able to read the contents of there reply here
    
* Create my first EC2 Instance - 
           #Choose which type of Server you want to host this Instance: ( Canonical, Ubuntu, 22.04 LTS, amd64 jammy image build on 2022-06-09 )
           
           #Choose the type of instance: ( t.2.micro )
                 
           #Create a Key-Pair for your Instance and give it a name (.pem file): "ray_pizza"
           This key pair will be used later when it is time to SSH into our server
           
           #REVIEW SUMMARY OF YOUR INSTANCE BEFORE FINALLY LAUNCHING IT ...
           
           # SUMMARY:
           Software Image (AMI)
           Canonical, Ubuntu, 22.04 LTS, ...read more
           ami-085284d24fe829cd0
           Virtual server type (instance type)
           t2.micro
           Firewall (security group)
           New security group
           Storage
           1 volume(s) - 8 GiB
           
           # After Instance is succesfully launched you will be given an Instance ID number for confirmation: (i-099d3b79cdb74ec2d)

* NEXT We are going to Configure "security groups" for the new instance that we just created (ray_pizza). 
            #Security groups are going to let you regulate which ports you decide to leave open or closed on the server.
            
            #Click on "Create new Security Group", Go into "Indbound Rules", "Add Rule"
            - First we are going to create an open port that we can later SSH into:
            Type:
            Custom TCP
            Protocol: 
            TCP
            Port range: 
            22
            Source type:
            Anywhere-IPv4
            Source: 
            0.0.0.0/0
            Description: 
            SSh

            - Next Rule we will change the "type" to "Custon UDP", and open port to allow DNS to work on our server:
            Type:
            Custom UDP
            Protocol: 
            UDP
            Port range: 
            53
            Source type:
            Anywhere-IPv4
            Source 
            0.0.0.0/0
            Description: 
            Dns
            
            - Next we will open Port 80 to allow HTTP Traffic to flow through Server (Since this instance is being used as  webserver this is essential to work):
            Type:
            Custom TCP
            Protocol: 
            TCP
            Port range: 
            80
            Source type:
            Anywhere-IPv4
            Source: 
            0.0.0.0/0
            Description: 
            HTTP
            
            - Next will also open port 443 to allow our server to send and recieve secure traffic:
            Type:
            Custom TCP
            Protocol: 
            TCP
            Port range: 
            443
            Source type:
            Anywhere-IPv4
            Source: 
            0.0.0.0/0
            Description: 
            HTTPS
            
            - Finally we are going to set up a port under "3333", now 3333 is not a standard port but is essential that it is open in order for gophish admin panel to access and work with the server, If this port is not available gophish admin panel will have no way to access and you will recieve the warning "Connection Timed out.":
            Type:
            Custom TCP
            Protocol: 
            TCP
            Port range: 
            3333
            Source type:
            Anywhere-IPv4
            Source: 
            0.0.0.0/0
            Description: 
            Gophihsh_admin
            
            # Now finalize all the new rules you have created by clicking "Create Security group" at the bottom.
            
* Once Instance choices are made and a security group we created is assigned to that insatance we can go ahead and launch.

* To test if your instance is currently open and accepting traffic through its ports you can go and try to ssh into the server with the .pem key on port 22:

ssh -i /home/kali/Desktop/gophish.pem ubuntu@44.201.169.181

NOTE: If given this warning - " WARNING: UNPROTECTED PRIVATE KEY FILE! " -
Enter: chmod 600 <sha_key.pem> 

* MAILGUN SETUP:

            - Start by adding the domain to your mailgun dashboard
            - Open your DNS records/settings from whatever site you chose to obtain your Domain from (ex. Freenom, route 53, etc..)
            - Copy over the records that are provided by Mailgun and submit them over to the site you aquired Domain from: 
                        Both TXT files (Check status of files w/ 'dig <hostname> TXT' )
                        CNAME file
            - Create SMTP settings to test an email witht he newly configured domain 
                        On left-hand side, go to "sending", then "domain settings", "SMTP credentials", and Reset password and copy the newly generated password given to you (I like to save this into a txt file to keep for my records).

---> Note: mailgun .mx records seem to never verify so we are going ahead to skip them this time. If you want to read the response that the victim sends back then you will want to add your mx records 

* Log into gophish panel, click on "Sending Profiles", add new profile:
            Name: <Any name of choice>
            SMTP From: <anyname_joedirt>@<phishingdomain.ck>
            Host: smtp.mailgun.org:587
            Username: postmaster@<your_domain>
            Pass: Paste in password we copied to txt file
            * Press "send test email"
      

* Next we are going to ssh back into our EC2 instance so that we can begin installing gophish.
            - To make sure all of our programs run correctly we are going to update all the packages on out ubuntu ec2 instance:
            sudo apt-get update
            sudo apt-get upgrade
            
            - Install golang:
            sudo apt-get install golang ...
            NOTE: I recieved the error: go: go.mod file not found in current directory or any parent directory
            Solution: go env -w GO111MODULE=auto (source: https://stackoverflow.com/questions/67929883/go-error-go-go-mod-file-not-found-in-current-directory-or-any-parent-director)
            
            - Install gophish:
            go get github.com/gophish/gophish
            cd go | cd src | cd github.com | cd gophish --> [ /home/ubuntu/go/src/github.com/gophish/gophish ]
            
            - Next we are going to build gophish program using go: ( run ls to make sure the gophish.go file is present in the directory )
            go build ( Once gophish is done build you can type ls again to confirm the new gophish file is created and present )
            
            - Next we are going to edit the config.json file, you can use nano or vim to do this:
            nano into the config.json file 
            We are going ot change the "listen_url" from 127 to 0.0.0.0:3333 so that gophish admin panel can be accessed from any ip (Note that the port being used is still 3333)
            Save and exit nano
            
* Now that gophish is fully installed and configed it is time to run the program inside opf our EC2 instance:

            sudo ./gophish
            admin
            dumdog12
            
            Error: " bind: address already in use "
            Solution: [Source](https://github.com/gophish/gophish/issues/2234)

* Next we will install and config Evilginx2 inside the instance as well (Open a new tab, ssh back into the EC2, and complete the steps to install Evilginx)

            - Since go is already installed we can eneter the following commands to set up Evilginx2:
            
            sudo apt-get -y install git make
            git clone https://github.com/kgretzky/evilginx2.git
            cd evilginx2
            make
            
            - If everything was done right you should be able to go ahead and run the program:
            
            sudo ./bin/evilginx -p ./phishlets/
            
            NOTE: Ignore warning - " [!!!] Failed to start nameserver on port 53 "



* Now that evilginx2 is istalled and running it is time to finish setting up the program to exucute the way we want it to (Complete the steps to properly configure evilginx2:):

            - Set up the domain you are using (Enter the domain that you are using): 
            
            config domain raymondspizzeria.cf
            
            - Tell evilginx what IP it should be running on (Enter the ip from your ec2 instance):
            
            config ip 44.201.169.181
            
* Now we are going to create additional DNS Record that will be used when our victim actually clicks to be directed to our domain page (Go back over to freenom and go into DNS Management):
            
            - Instead of just showing the main domain that we have aquired we are going to create some more realistic DNS records that can help make the full URL more believable for whatever we are choosing to do
            
            name: login.raymondspizzeria.cf | Type: A | Target or Value: <ec2 ip> 44.201.169.181

* NEXT NEXT
*
*
*
*
